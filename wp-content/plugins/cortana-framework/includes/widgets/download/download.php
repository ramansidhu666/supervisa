<?php/** * Created by PhpStorm. * User: PhanLong * Date: 10/21/2015 * Time: 6:47 PM */if ( !class_exists( 'g5plus_download' ) ) {	class g5plus_download  extends Exception{		public function __construct() {			// TO DO: Add submenu for options			//add_action('admin_menu', array(&$this, 'sdf_menu_options'));//			// Adding media button into the content editor//			add_action('media_buttons_context',  array(&$this, 'editor_download_button'), 10);////			// Adding popup window for file selection from media library//			add_action( 'admin_footer',  array(&$this, 'add_inline_popup_content') );////			// Adding admin footer scripts when download link is available'//			add_action('admin_enqueue_scripts', array(&$this, 'admin_footer_scripts'), 10 );			// Do the ajax request for media files			add_action( 'wp_ajax_get-media-location', array( &$this, 'get_media_files_attachment' ) );			add_action( 'wp_ajax_nopriv_get-media-location', array( &$this, 'get_media_files_attachment' ) );////			// Shortcode support//			add_shortcode('media-downloader', array(&$this, 'sfd_media_downloader') );			// Process download			add_action( 'init', array( &$this, 'sfd_process_download' ), 10 );			// TO DO: Localization support			//add_action('plugins_loaded', array(&$this,'sfd_plugins_loaded'), 10, 2 );		}		function get_media_files_attachment() {			$media_location = $_POST['media_location'];			if ( empty( $media_location ) ) {				return;			}			$return_data = array();			if ( $media_location == 'attached-files' ) {				$args = array( 'post_type' => 'attachment', 'posts_per_page' => - 1, 'post_parent__not_in' => array( 0 ), 'post_status' => 'inherit', 'orderby' => 'title', 'order' => 'ASC' );			} else {				$args = array( 'post_type' => 'attachment', 'posts_per_page' => - 1, 'post_parent' => 0, 'post_status' => 'inherit', 'orderby' => 'title', 'order' => 'ASC' );			}			$get_media = get_posts( $args );			if ( $get_media ) {				foreach ( $get_media as $key => $attachment ) {					$html .= '<option value="' . $attachment->ID . '">' . $attachment->post_title . '</option>';				} // end foreach				$return_data['message'] = $html;				$return_data['error']   = 0;			} else {				$return_data['message'] = '<option value="">-' . __( 'No files found.', 'sfd' ) . '-</option>';				$return_data['error']   = 1;			} // endif			$response = json_encode( $return_data );			header( 'Content-Type: application/json' );			echo $response;			die();		}		/**		 * Shortcode handler		 *		 * @param array $atts		 *		 * @return string $download_link		 */		public function get_media_downloader( $media_id ) {			global $post;			if ( $media_id > 0 ) {				$download_link  = site_url( '?media_dl=' ) . $media_id . '';				$get_media_item = wp_get_attachment_url( $media_id );				$uploads        = wp_upload_dir();				$file_path      = str_replace( $uploads['baseurl'], $uploads['basedir'], $get_media_item );				$size_texts     = ( !empty( $size_texts ) ) ? $size_texts : 'Size';				//$download_link .= ' ' . strtoupper( $size_texts ) . ': ' . $this->formatSizeUnits( filesize( $file_path ) );				return $download_link;			}		}		/**		 * Read a file and display its content chunk by chunk to address the large file download		 *		 * @param string  $filename Required		 * @param boolean $retbytes Default: true		 */		function readfileChunked( $filename, $retbytes = true ) {			$chunksize = 1 * ( 1024 * 1024 );			$buffer    = '';			$cnt       = 0;			$handle    = fopen( $filename, 'rb' );			if ( $handle === false ) {				return false;			}			while ( !feof( $handle ) ) {				$buffer = fread( $handle, $chunksize );				echo $buffer;				ob_flush();				flush();				if ( $retbytes ) {					$cnt += strlen( $buffer );				}			}			$status = fclose( $handle );			if ( $retbytes && $status ) {				return $cnt; // return num. bytes delivered like readfile() does.			}			return $status;		}		/**		 * Filesize formatting		 *		 * @param int $bytes		 *		 * @return string $bytes		 */		function formatSizeUnits( $bytes ) {			if ( $bytes >= 1073741824 ) {				$bytes = number_format( $bytes / 1073741824, 2 ) . ' GB';			} elseif ( $bytes >= 1048576 ) {				$bytes = number_format( $bytes / 1048576, 2 ) . ' MB';			} elseif ( $bytes >= 1024 ) {				$bytes = number_format( $bytes / 1024, 2 ) . ' KB';			} elseif ( $bytes > 1 ) {				$bytes = $bytes . ' bytes';			} elseif ( $bytes == 1 ) {				$bytes = $bytes . ' byte';			} else {				$bytes = '0 bytes';			}			return $bytes;		}	}}